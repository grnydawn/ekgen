
This example shows how to use KGEN to extract a kernel from a simple Fortran application.

[ Prerequisites ]
	1. Python Version >= 2.7
	2. cpp preprocessor
	3. make
	4. strace

[ Kernel extraction steps ]

	1. >> vi src/Makefile; # Modify FC if required

	2. >> make; # extract a kernel

	Once "make" is completed with success, you will see information similar to next lines on screen

		../../bin/kgen \
			--cmd-clean "cd ..KGen/examples/simple/src; make clean" \
			--cmd-build "cd ..KGen/examples/simple/src; make build" \
			--cmd-run "cd ..KGen/examples/simple/src; make run" \
			--repr-etime disable \
			--repr-code percentage=99,filter=test1:test2 \
			..KGen/examples/simple/src/update_mod.F90:update_mod:update:calc 
		Creating KGen strace logfile: ./strace.log
		Creating KGen include file: ./include.ini
		Reading ..KGen/examples/simple/src/update_mod.F90
		Reading ..KGen/examples/simple/src/calc_mod.F90
		Starting KCover
		Generating coverage raw data.
		Instrumentation for coverage is generated at ..KGen/examples/simple/coverage.
		Generating model file: ./model.ini
		Collecting raw data.
		Adding coverage data into the model file.
			***** Within "calc" kernel *****:
			* 1 original source files have conditional blocks.
			* 1 original source files are invoked at least once.
			* 2 conditional blocks exist in the original source files.
			* 2 conditional blocks are executed at least once among all the conditional blocks.
		Reading ./model.ini
		At least, 99.0% of conditional blocks will be excuted by using following (MPI ranks, OpenMP Threads, Invokes) triples:
		0:0:9,0:0:7,0:0:12,0:0:3,0:0:8,0:0:17,0:0:6,0:0:15,0:0:20,0:0:2,0:0:11,0:0:16,0:0:14,0:0:5,0:0:10,0:0:19,0:0:1,0:0:4,0:0:13,0:0:18
		Disabled elapsedtime.
		Disabled papi.
		Starting KExtract
		Kernel generation and instrumentation is completed.
		Makefiles are generated
		Application is being built/run with state generation instrumentation.
		Application built/run is finished.

	After this step, three subfolders(kernel, state, and coverage) will be created under this folder.
	Kernel files and state data files(calc.*.*.*) should be created in kernel folder.
	In state folder, KGen-instrumented files are created.
	In coverage folder, files whose extension is "coverage" contain coverage information.

	NOTE: If compilation happens at different directory other than examples/src folder, please add following KGen flag similar to following:
		--source alias=/your/examples/src:/somewhere/compilation/happens

	3. >> cd kernel; # move to a kernel directory

	4. >> make; # build and run a kernel

	In this step, the generated kernel will be built/run, and verfication, timing, and coverage information will be displayed on screen.

		ifort -fpp -D KGEN_COVERAGE  -c -o kgen_utils.o kgen_utils.f90
		ifort -fpp -D KGEN_COVERAGE  -c -o tprof_mod.o tprof_mod.f90
		ifort -fpp -D KGEN_COVERAGE  -c -o calc_mod.o calc_mod.F90
		ifort -fpp -D KGEN_COVERAGE  -c -o update_mod.o update_mod.F90
		ifort -fpp -D KGEN_COVERAGE  -c -o kernel_driver.o kernel_driver.f90
		ifort -fpp -D KGEN_COVERAGE  -o kernel.exe update_mod.o calc_mod.o kernel_driver.o kgen_utils.o tprof_mod.o  
		./kernel.exe
		 
		 ***************** Verification against 'calc.0.0.9' *****************
		 
		 Number of output variables:            3
		 Number of identical variables:            3
		 Number of non-identical variables within tolerance:            0
		 Number of non-identical variables out of tolerance:            0
		 Tolerance:   1.000000000000000E-014
		 
		 Verification PASSED
		 
		 calc : Time per call (usec):    1.00000000000000     
		 
		 ***************** Verification against 'calc.0.0.7' *****************
		 
		 Number of output variables:            3
		 Number of identical variables:            3
		 Number of non-identical variables within tolerance:            0
		 Number of non-identical variables out of tolerance:            0
		 Tolerance:   1.000000000000000E-014
		 
		 Verification PASSED
		 
		 calc : Time per call (usec):   0.000000000000000E+000


		...


		 ***************** Verification against 'calc.0.0.4' *****************
		 
		 Number of output variables:            3
		 Number of identical variables:            3
		 Number of non-identical variables within tolerance:            0
		 Number of non-identical variables out of tolerance:            0
		 Tolerance:   1.000000000000000E-014
		 
		 Verification PASSED
		 
		 calc : Time per call (usec):   0.000000000000000E+000
		 
		 ***************** Verification against 'calc.0.0.13' *****************
		 
		 Number of output variables:            3
		 Number of identical variables:            3
		 Number of non-identical variables within tolerance:            0
		 Number of non-identical variables out of tolerance:            0
		 Tolerance:   1.000000000000000E-014
		 
		 Verification PASSED
		 
		 calc : Time per call (usec):   0.000000000000000E+000
		 
		****************************************************
			kernel execution summary: calc
		****************************************************
			Total number of verification cases  :    20
			Number of verification-passed cases :    20
		 
			Average call time (usec):  0.300E+00
			Minimum call time (usec):  0.000E+00
			Maximum call time (usec):  0.100E+01
		****************************************************
		****************************************************************************
			kernel coverage using input files on "kgen_statefile.lst"
		****************************************************************************

		 In "..KGen/examples/simple/src/calc_mod.F90" (file id=0),
		   Kernel visited           24 times at line_id=0 (near original line=22)
		   Kernel visited           56 times at line_id=1 (near original line=27)
		****************************************************************************

